#!/bin/bash

spell() {
	if [[ "$#" -eq 0 ]]; then
		cat /usr/share/dict/words |
			fzf --preview 'dict -d wn {} | fold -w $COLUMNS -s' --height=80% --preview-window=up:60% --layout=default |
			xargs dict -d wn | yank
	else
		cat /usr/share/dict/words |
			fzf --query $1 --preview 'dict -d wn {} | fold -w $COLUMNS -s' --height=80% --preview-window=up:60% --layout=default |
			xargs dict -d wn | yank
	fi
}

rgi() {
	if [ ! "$#" -gt 0 ]; then
		echo "Need a string to search for!"
		return 1
	fi
	rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}

fcd() {
    local searchdir

    if [ -n "$1" ]; then
        searchdir="$1"
    else
        searchdir="$HOME"
    fi

    # Create a temporary file
    local tmpfile
    tmpfile=$(mktemp)

    # Use find and fzf to select a directory
    find "$searchdir" \( ! -regex '.*/\..*' \) ! -name __pycache__ -type d | fzf > "$tmpfile"
    local destdir
    destdir=$(cat "$tmpfile")
    rm -f "$tmpfile"

    # If no directory is selected, return with an error
    if [ -z "$destdir" ]; then
        return 1
    fi

    # Change to the selected directory
    cd "$destdir"
}

fkill() {
	local pid
	if [ "$UID" != "0" ]; then
		pid=$(ps -f -u $UID | sed 1d | fzf -m --preview='' | awk '{print $2}')
	else
		pid=$(ps -ef | sed 1d | fzf -m --preview='' | awk '{print $2}')
	fi

	if [ "x$pid" != "x" ]; then
		echo $pid | xargs kill -${1:-9}
	fi
}

fman() {
	batman="man {1} | col -bx | bat --language=man --plain --color always --theme=\"Monokai Extended\""
	man -k . | sort |
		awk -v cyan=$(tput setaf 6) -v blue=$(tput setaf 4) -v res=$(tput sgr0) -v bld=$(tput bold) '{ $1=cyan bld $1; $2=res blue;} 1' |
		fzf \
			-q "$1" \
			--ansi \
			--tiebreak=begin \
			--prompt=' Man > ' \
			--preview-window '50%,rounded,<50(up,85%,border-bottom)' \
			--preview "${batman}" \
			--bind "enter:execute(man {1})" \
			--bind "alt-c:+change-preview(cht.sh {1})+change-prompt(ﯽ Cheat > )" \
			--bind "alt-m:+change-preview(${batman})+change-prompt( Man > )" \
			--bind "alt-t:+change-preview(tldr --color=always {1})+change-prompt(ﳁ TLDR > )"
	zle reset-prompt
}

topmem() {
    ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head
}

delete-broken-symlinks () {
  find . -xtype l -print -exec rm {} +
}

y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

json-beautify-inplace () {
  temp=$(mktemp)
  printf 'input = %s\n' "$1"
  printf 'temp  = %s\n' "$temp"
  \cp -- "$1" "$temp"
  jq . "$temp" > "$1"
}

json-beautify-sort-inplace () {
  temp=$(mktemp)
  printf 'input = %s\n' "$1"
  printf 'temp  = %s\n' "$temp"
  \cp -- "$1" "$temp"
  jq -S . "$temp" > "$1"
}
